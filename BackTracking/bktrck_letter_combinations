
from typing import List


class Solution:
    """Given a string containing digits from 2-9 inclusive, return all possible letter 
       combinations that the number could represent. Return the answer in any order.
       A mapping of digit to letters (just like on the telephone buttons) is given below. 
       Note that 1 does not map to any letters.
       https://leetcode.com/problems/letter-combinations-of-a-phone-number/
    """
    def letterCombinations(self, digits: str) -> List[str]:
        if digits == "":
            return []
        map = {"2": "abc", "3":"def", "4":"ghi","5":"jkl","6":"mno","7":"pqrs","8":"tuv", "9":"wxyz"}
        ls = [map[x] for x in digits]
        ans = ""
        self.res = []
        n = len(digits)
        res = self.combinations_ph_no(0, 0, ls, ans, "", self.res, n)
        #print(self.res)
        return self.res
        
    def combinations_ph_no(self, i, j, ls, ans, tmp, res, n):
        
        # Base Case
        if len(ans) == n:
            res.append(ans)
            self.res = res
            return
        if j == len(ls[i]):
            return
    
        tmp = ans
        ans = ans + ls[i][j]
        self.combinations_ph_no(i+1, 0, ls, ans, tmp, res, n)
        ans = tmp
        self.combinations_ph_no(i, j+1, ls, ans, tmp, res, n)